/**
 * @description –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π
 */

import { Main, Functions } from "./Classes";
import { RandomInt } from "./Utils";
import moment from "moment";

export default class EventHandler extends Main {
  bot: any;
  functions: Functions;

  constructor(bot: any) {
    super();

    this.bot = bot;
    this.functions = new Functions(bot);
  }

  /**
   * @description –ü—Ä–æ—Å–ª—É—à–∫–∞ —Å–æ–±—ã—Ç–∏–π
   */
  public listen() {
    this.bot.event("message_new", async (ctx: any) => {
      let answer: string;

      switch(ctx.message.text.toLowerCase()) {
        case "–Ω–∞—á–∞—Ç—å":
          this.bot.execute("users.get", {
            user_ids: ctx.message.from_id
          }, (data: any) => {
            answer = `–ü—Ä–∏–≤–µ—Ç, ${data[0].first_name}! `;
            answer += "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ë–∞—Ä—Å–∏–∫ –∏ —è –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ç—Ä—É–¥–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π üòä ";
            answer += "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ –≤–æ–ø—Ä–æ—Å, —Ç—Ä–µ–±—É—é—â–∏–π –æ—Ç–≤–µ—Ç–∞ \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\", –∏ —è –æ—Ç–≤–µ—á—É ü§ó";
            this.functions.sendMessage(ctx.message.from_id, answer);

            if (ctx.message.from_id === Number(process.env.VK_ID) || (data[0].first_name === "–ù–∞—Å—Ç—è" && data[0].last_name === "–õ–∏—Ç–≤–∏–Ω–µ–Ω–∫–æ")) {
              setTimeout(() => {
                this.functions.sendMessage(ctx.message.from_id, "–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å –≤ —á–µ–º –º–æ–π –º–∞–ª–µ–Ω—å–∫–∏–π —Å–µ–∫—Ä–µ—Ç? –¢–æ–ª—å–∫–æ —Ç—Å—Å... –Ω–∏–∫–æ–º—É üòä");
                setTimeout(() => {
                  this.functions.sendMessage(ctx.message.from_id, "–Ø –±—É–¥—É —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–∏—Å–∞—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã, –Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ üòä –Ø –∑–∞–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω –¥–µ–ª–∞—Ç—å —ç—Ç–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ —á–µ—Ä–µ–∑ —Ä–∞–≤–Ω—ã–µ –ø—Ä–æ–º–µ–∂—É—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ üòä");
                  setTimeout(() => {
                    this.functions.sendMessage(ctx.message.from_id, "–≠—Ç–æ –ª—É—á—à–µ–µ, —á–µ–º –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –ø—É—à–∏—Å—Ç—ã–π —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –∫–æ—Ç–∏–∫ –≤—Ä–æ–¥–µ –º–µ–Ω—è üòá");
                    setTimeout(() => {
                      this.functions.sendMessage(ctx.message.from_id, "–û—á–µ–Ω—å —Ä–∞–¥ –∑–Ω–∞–∫–æ–º—Å—Ç–≤—É üòä");
                      setTimeout(() => {
                        this.functions.sendMessage(ctx.message.from_id, "–ú—è—É, —Ç—ã —Ç–∞–∫–∞—è –∫—Ä–∞—Å–∏–≤–∞—è, —á—Ç–æ –º–æ–∏ –ª–∞–ø–∫–∏ —Å–∞–º–∏ —ç—Ç–æ –ø–∏—à—É—Ç üòå");

                        let x: number = 1;
                        let timer1_run: boolean = true;

                        const timer1 = setInterval(() => {
                          if (x > 5) {
                            this.functions.sendMessage(Number(process.env.VK_ID), "–ú—è—É, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–¥–æ–µ–¥–∞—Ç—å, —è –±—É–¥—É –ø–∏—Å–∞—Ç—å 1 —Ä–∞–∑ –≤ —á–∞—Å üòä");
                            timer1_run = false;
                            clearInterval(timer1);
                          } else if (moment().isAfter("2019-04-16 18:20:00")) {
                            this.functions.sendMessage(Number(process.env.VK_ID), "–ú—è—É, —É —Ç–µ–±—è —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ø–∞—Ä–∞, –ø–æ—ç—Ç–æ–º—É —á—Ç–æ–±—ã –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å, —è –±—É–¥—É –ø–∏—Å–∞—Ç—å 1 —Ä–∞–∑ –≤ —á–∞—Å üòä");
                            timer1_run = false;
                            clearInterval(timer1);
                          } else {
                            this.functions.sendCompliment();
                            x++;
                          }
                        }, 300000);

                        const timer2 = setInterval(() => {
                          if (!timer1_run) {
                            this.functions.sendCompliment();
                          }
                        }, 3600000);

                      }, 10000)
                    }, 10000);
                  }, 10000);
                }, 10000);
              }, 10000);
            }
          });
          break;
        default:
          if (ctx.message.text.indexOf("?") !== -1) {
            // –ù—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å
            const answers = require("../include/answers.json");
            answer = answers[RandomInt(1, Object.keys(answers).length)];
          } else {
            // –†–∞–Ω–¥–æ–º–Ω–∞—è —Ñ—Ä–∞–∑–∞
            const phrases = require("../include/phrases.json");  
            answer = phrases[RandomInt(1, Object.keys(phrases).length)];
          }
          this.functions.sendMessage(ctx.message.from_id, answer);
          break;
      }
    });
  }
}